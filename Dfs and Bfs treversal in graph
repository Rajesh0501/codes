//bfs treversal
class Solution {
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
       ArrayList<Integer> ans = new ArrayList<>();
       boolean[] visited = new boolean[V];
       Queue<Integer> q = new LinkedList<>();
       q.add(0);
       while(!q.isEmpty()){
           int curr = q.remove();
           if(visited[curr]==false){
               ans.add(curr);
               visited[curr] = true;
               for(int i  = 0; i<adj.get(curr).size(); i++){
                   q.add(adj.get(curr).get(i));
               }
           }
       }
       
       return ans;
        
    }
}

//dfs treversal

class Solution {
      public void dfs(int curr,ArrayList<Integer> ans,boolean[] visited, ArrayList<ArrayList<Integer>> adj){
          visited[curr] = true;
          ans.add(curr);
          for(int i = 0; i<adj.get(curr).size(); i++){
              int x = adj.get(curr).get(i);
              if(visited[x]==false){
                  dfs(x,ans,visited,adj);
              }
          }
      }
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
       ArrayList<Integer> ans = new ArrayList<>();
       boolean[] visited = new boolean[V];
       dfs(0,ans,visited,adj);
       return ans;
    }
}

