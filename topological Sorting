class Solution
{
     public int[] tp(int V,ArrayList<ArrayList<Integer>> adj){
         int[] result = new int[V];
        boolean[] visited = new boolean[V];
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i< adj.size();i++){
            if (!visited[i]){
                tputil(adj,i,visited,s);
            }
        }
        int index = 0;
        while (!s.isEmpty()){
            result[index++] = s.pop();
        }
        return result;
   }
   public  void tputil(ArrayList<ArrayList<Integer>> adj,int curr,boolean[] visited,Stack<Integer> s){
        visited[curr] = true;
        for (int i = 0; i<adj.get(curr).size(); i++){
            int x = adj.get(curr).get(i);
            if(!visited[x]){
                tputil(adj, x, visited,s);
            }
        }
        s.push(curr);
   }
   
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        Solution solution = new Solution();
        return solution.tp(V, adj);
    }
}
